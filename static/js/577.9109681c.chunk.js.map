{"version":3,"file":"static/js/577.9109681c.chunk.js","mappings":"8PACA,EAAyB,uBAAzB,EAAuD,qBAAvD,EAAoF,sBAApF,EAAyH,6BAAzH,EAAqK,6BAArK,EAAgN,4BAAhN,EAA2P,6BAA3P,EAAwS,8BAAxS,EAAqV,6BAArV,EAAiY,6BAAjY,EAAob,oCAApb,EAA+d,qB,2BCMhd,SAASA,IAAU,IAAD,IAC/B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,QAAOL,GAC1B,GAA0BN,EAAAA,EAAAA,UAAQ,UAACU,EAAWE,eAAZ,QAAuB,IAAzD,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,8GAEuBC,EAAAA,EAAAA,GAAW,gBAAD,iBAA4BV,IAF7D,OAEUW,EAFV,OAGIf,EAAUe,EAAKC,SAHnB,gDAKIC,QAAQC,IAAR,MALJ,0DAJc,sBACA,KAAVd,GADU,mCAade,EACD,GAAE,CAACf,IAoBJ,OACE,iBAAKgB,UAAWC,EAAhB,WACE,kBAAMC,SAhBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OACf,GAAkC,KAA9BD,EAAKE,SAASvB,MAAMwB,MAEtB,OADAC,EAAAA,GAAAA,KAAW,mCACJ1B,EAAgB,CAAC,GAEtBsB,EAAKE,SAASvB,MAAMwB,QAAUxB,EAIlCD,EAAgB,CAAEC,MAAOqB,EAAKE,SAASvB,MAAMwB,QAH3CC,EAAAA,GAAAA,KAAA,wCAA4CzB,EAA5C,KAIH,EAIiCgB,UAAWC,EAAzC,WACE,kBACES,KAAK,OACLC,KAAK,QACLX,UAAWC,EACXO,MAAOjB,EACPqB,SA1Ba,SAAAT,GACnBX,EAASW,EAAEG,OAAOE,MACnB,KA0BK,mBAAQE,KAAK,SAASV,UAAWC,EAAjC,uBAIS,KAAVjB,GAAgBL,EAAOkC,OAAS,IAC/B,eAAIb,UAAWC,EAAf,SACGtB,EAAOmC,KAAI,SAAAC,GAAK,OACf,eAAmBf,UAAWC,EAA9B,UACE,gBAAKD,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEe,GAAE,UAAKD,EAAME,IACbC,MAAO,CAAEC,KAAMjC,GACfc,UAAWC,EAHb,SAKGc,EAAMK,aACL,gBACEpB,UAAWC,EACXoB,IAAG,0CAAqCN,EAAMK,aAC9CE,IAAKP,EAAMQ,MACXC,MAAM,SAGR,eAAGxB,UAAWC,EAAd,qDAC2C,KACzC,uBAAIc,EAAMQ,QAFZ,YAfCR,EAAME,GADA,MA2BV,KAAVjC,GAAkC,IAAlBL,EAAOkC,SACtB,4BACE,gBACEQ,IAAKI,EACLH,IAAI,eACJE,MAAM,MACNxB,UAAWC,KAEb,eAAGD,UAAWC,EAAd,6CACmCjB,EADnC,SAGA,cAAGgB,UAAWC,EAAd,+CAGO,KAAVjB,IACC,4BACE,gBACEqC,IAAKI,EACLH,IAAI,eACJE,MAAM,MACNxB,UAAWC,KAEb,cAAGD,UAAWC,EAAd,0CACA,cAAGD,UAAWC,EAAd,kDAKT,C,8FCtHKyB,EAAU,mCACVC,EAAW,+BAEF,SAAejC,EAA9B,iDAAe,OAAf,oBAAe,WAA0BkC,EAAUC,GAApC,uFACUC,EAAAA,EAAAA,IAAA,UAClBH,GADkB,OACPC,EADO,oBACaF,EADb,YACwBG,IAFlC,cACPE,EADO,yBAINA,EAASpC,MAJH,kE","sources":["webpack://goit-react-hw-05-movies/./src/pages/movies/Movies.module.css?c186","pages/movies/Movies.jsx","services/apiService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movies\":\"Movies_movies__QIa1b\",\"form\":\"Movies_form__utRLM\",\"input\":\"Movies_input__+JkfI\",\"searchButton\":\"Movies_searchButton__cozX1\",\"defaultImage\":\"Movies_defaultImage__A00Fi\",\"movies__img\":\"Movies_movies__img__rkfEl\",\"movies__text\":\"Movies_movies__text__iyQYU\",\"movies__descr\":\"Movies_movies__descr__NLgxL\",\"movies__list\":\"Movies_movies__list__OPKjF\",\"movies__item\":\"Movies_movies__item__T-yJ1\",\"movies__itemWrapper\":\"Movies_movies__itemWrapper__aioWA\",\"link\":\"Movies_link__XMa7X\"};","import { useEffect, useState, useRef } from 'react';\nimport { NavLink, useSearchParams, useLocation } from 'react-router-dom';\nimport apiService from 'services/apiService';\nimport css from './Movies.module.css';\nimport image from '../../images/movie-597004_640.jpg';\nimport { toast } from 'react-toastify';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n  const inputValue = useRef(query);\n  const [input, setInput] = useState(inputValue.current ?? '');\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    async function fetchMovies() {\n      try {\n        const data = await apiService('/search/movie', `&query=${query}`);\n        setMovies(data.results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchMovies();\n  }, [query]);\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    if (form.elements.query.value === '') {\n      toast.info('Please enter your search query.');      \n      return setSearchParams({});\n    }\n    if (form.elements.query.value === query) {\n      toast.info(`We already found movies with \"${query}\"`);     \n      return;\n    }\n    setSearchParams({ query: form.elements.query.value });\n  };\n\n  return (\n    <div className={css.movies}>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          className={css.input}\n          value={input}\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className={css.searchButton}>\n          Search\n        </button>\n      </form>\n      {query !== '' && movies.length > 0 && (\n        <ul className={css.movies__list}>\n          {movies.map(movie => (\n            <li key={movie.id} className={css.movies__item}>\n              <div className={css.movies__itemWrapper}>\n                <NavLink\n                  to={`${movie.id}`}\n                  state={{ from: location }}\n                  className={css.link}\n                >\n                  {movie.poster_path ? (\n                    <img\n                      className={css.movies__img}\n                      src={`https://image.tmdb.org/t/p/w185/${movie.poster_path}`}\n                      alt={movie.title}\n                      width=\"220\"\n                    />\n                  ) : (\n                    <p className={css.movies__descr}>\n                      Sorry, there is no poster for this movie{' '}\n                      <b>{movie.title}</b>.\n                    </p>\n                  )}\n                </NavLink>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n      {query !== '' && movies.length === 0 && (\n        <div>\n          <img\n            src={image}\n            alt=\"Movie poster\"\n            width=\"480\"\n            className={css.defaultImage}\n          />\n          <p className={css.movies__text}>\n            Oops, there are no movies with \"{query}\".\n          </p>\n          <p className={css.movies__text}>Please enter new search query.</p>\n        </div>\n      )}\n      {query === '' && (\n        <div>\n          <img\n            src={image}\n            alt=\"Movie poster\"\n            width=\"480\"\n            className={css.defaultImage}\n          />\n          <p className={css.movies__text}>What movies will we search?</p>\n          <p className={css.movies__text}>Please enter your search query.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst KEY_API = 'e1e6b0abeb0232c01b22621de6af9734';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport default async function apiService(pathname, search) {\n  const response = await axios.get(\n    `${BASE_URL}${pathname}?api_key=${KEY_API}&${search}`\n  );\n  return response.data;\n}\n"],"names":["Movies","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","inputValue","useRef","current","input","setInput","useEffect","apiService","data","results","console","log","fetchMovies","className","css","onSubmit","e","preventDefault","form","target","elements","value","toast","type","name","onChange","length","map","movie","to","id","state","from","poster_path","src","alt","title","width","image","KEY_API","BASE_URL","pathname","search","axios","response"],"sourceRoot":""}